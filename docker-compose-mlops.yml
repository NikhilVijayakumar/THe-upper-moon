# Define the network for all services
networks:
  mlops_net:
    driver: bridge

volumes:
  minio_data:

services:
  # ------------------------------------------------------------------
  # 1. MINIO (Artifact Store for MLflow & DVC)
  # ------------------------------------------------------------------
  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z-cpuv1
    container_name: minio
    restart: always
    ports:
      - "9000:9000" # API Port
      - "9001:9001" # Console Port
    env_file:
      - .env
    volumes:
      - ./minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - mlops_net

  # ------------------------------------------------------------------
  # 2. MINIO CLIENT (Initializes the MLflow/DVC buckets)
  # ------------------------------------------------------------------
  mc:
    image: minio/mc
    container_name: minio_client
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set local http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb local/mlflow-artifacts --ignore-existing;
      /usr/bin/mc mb local/dvc-storage --ignore-existing;
      /usr/bin/mc policy set public local/mlflow-artifacts;
      /usr/bin/mc policy set public local/dvc-storage;
      exit 0;
      "
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - mlops_net

  # ------------------------------------------------------------------
  # 3. MLFLOW TRACKING SERVER
  # ------------------------------------------------------------------
  mlflow:
    build:
      context: ./mlflow_server
      dockerfile: Dockerfile
    container_name: mlflow
    restart: always
    ports:
      - "5000:5000"
    env_file:
      - .env
    command: >
      sh -c "sleep 5 && 
      mlflow server
      --backend-store-uri $$MLFLOW_BACKEND_STORE_URI 
      --artifacts-destination s3://mlflow-artifacts/
      --host 0.0.0.0
      --port 5000"
    depends_on:
      mc:
        condition: service_completed_successfully
    networks:
      - mlops_net

  # ------------------------------------------------------------------
  # 4. AIRFLOW SERVICES
  # ------------------------------------------------------------------
  airflow-init:
    build: ./airflow
    container_name: airflow_init
    env_file:
      - .env
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=$$AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
    entrypoint: [ "/usr/bin/dumb-init", "--", "/bin/bash", "-c" ]
    command: >
      sh -c "
      sleep 10 &&
      airflow db init && 
      airflow db migrate &&
      airflow users create 
        --username $$AIRFLOW_USER 
        --firstname $$AIRFLOW_FIRST 
        --lastname $$AIRFLOW_LAST 
        --role Admin 
        --email $$AIRFLOW_EMAIL 
        --password $$AIRFLOW_PASS
      "
    networks:
      - mlops_net
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow_data:/opt/airflow

  airflow-webserver:
    build: ./airflow
    container_name: airflow_webserver
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=$$AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    command: [ "airflow", "webserver" ] # Corrected to show the UI
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mlops_net
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow_data:/opt/airflow
      - ./src:/app/hashiramart

  airflow-scheduler:
    build: ./airflow
    container_name: airflow_scheduler
    restart: always
    env_file:
      - .env
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=$$AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    command: [ "airflow", "scheduler" ]
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mlops_net
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow_data:/opt/airflow
      - ./src:/app/hashiramart

  # ------------------------------------------------------------------
  # 5. FASTAPI BACKEND
  # ------------------------------------------------------------------
  fastapi_backend:
    build:
      context: ./src
      dockerfile: Dockerfile
    container_name: fastapi_backend
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - .env
    command: >
      sh -c "sleep 5 && 
      uvicorn hashiramart.api.app:app --host 0.0.0.0 --port 8000"
    depends_on:
      mlflow:
        condition: service_started
    networks:
      - mlops_net